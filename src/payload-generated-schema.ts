/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  serial,
  varchar,
  numeric,
  timestamp,
  jsonb,
  boolean,
  pgEnum,
} from "@payloadcms/db-postgres/drizzle/pg-core";
import { sql, relations } from "@payloadcms/db-postgres/drizzle";
import { geometryColumn } from "@payloadcms/db-postgres";
export const enum_users_roles = pgEnum("enum_users_roles", ["admin", "user"]);
export const enum_games_type = pgEnum("enum_games_type", [
  "boardgame",
  "videogame",
  "cardgame",
  "tabletop",
  "other",
]);

export const users_roles = pgTable(
  "users_roles",
  {
    order: integer("order").notNull(),
    parent: integer("parent_id").notNull(),
    value: enum_users_roles("value"),
    id: serial("id").primaryKey(),
  },
  (columns) => ({
    orderIdx: index("users_roles_order_idx").on(columns.order),
    parentIdx: index("users_roles_parent_idx").on(columns.parent),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [users.id],
      name: "users_roles_parent_fk",
    }).onDelete("cascade"),
  })
);

export const users_libraries = pgTable(
  "users_libraries",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    library: integer("library_id").references(() => libraries.id, {
      onDelete: "set null",
    }),
  },
  (columns) => ({
    _orderIdx: index("users_libraries_order_idx").on(columns._order),
    _parentIDIdx: index("users_libraries_parent_id_idx").on(columns._parentID),
    users_libraries_library_idx: index("users_libraries_library_idx").on(
      columns.library
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [users.id],
      name: "users_libraries_parent_id_fk",
    }).onDelete("cascade"),
  })
);

export const users_game_nights = pgTable(
  "users_game_nights",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    "game night": integer("game_night_id").references(() => gamenights.id, {
      onDelete: "set null",
    }),
  },
  (columns) => ({
    _orderIdx: index("users_game_nights_order_idx").on(columns._order),
    _parentIDIdx: index("users_game_nights_parent_id_idx").on(
      columns._parentID
    ),
    users_game_nights_game_night_idx: index(
      "users_game_nights_game_night_idx"
    ).on(columns["game night"]),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [users.id],
      name: "users_game_nights_parent_id_fk",
    }).onDelete("cascade"),
  })
);

export const users_friends = pgTable(
  "users_friends",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
  },
  (columns) => ({
    _orderIdx: index("users_friends_order_idx").on(columns._order),
    _parentIDIdx: index("users_friends_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [users.id],
      name: "users_friends_parent_id_fk",
    }).onDelete("cascade"),
  })
);

export const users_notebooks = pgTable(
  "users_notebooks",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
  },
  (columns) => ({
    _orderIdx: index("users_notebooks_order_idx").on(columns._order),
    _parentIDIdx: index("users_notebooks_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [users.id],
      name: "users_notebooks_parent_id_fk",
    }).onDelete("cascade"),
  })
);

export const users = pgTable(
  "users",
  {
    id: serial("id").primaryKey(),
    username: varchar("username").notNull(),
    firstName: varchar("first_name"),
    lastName: varchar("last_name"),
    phone: numeric("phone"),
    avatar: integer("avatar_id").references(() => media.id, {
      onDelete: "set null",
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    email: varchar("email").notNull(),
    resetPasswordToken: varchar("reset_password_token"),
    resetPasswordExpiration: timestamp("reset_password_expiration", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar("salt"),
    hash: varchar("hash"),
    loginAttempts: numeric("login_attempts").default("0"),
    lockUntil: timestamp("lock_until", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    users_username_idx: uniqueIndex("users_username_idx").on(columns.username),
    users_avatar_idx: uniqueIndex("users_avatar_idx").on(columns.avatar),
    users_updated_at_idx: index("users_updated_at_idx").on(columns.updatedAt),
    users_created_at_idx: index("users_created_at_idx").on(columns.createdAt),
    users_email_idx: uniqueIndex("users_email_idx").on(columns.email),
  })
);

export const users_rels = pgTable(
  "users_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
    notesID: integer("notes_id"),
  },
  (columns) => ({
    order: index("users_rels_order_idx").on(columns.order),
    parentIdx: index("users_rels_parent_idx").on(columns.parent),
    pathIdx: index("users_rels_path_idx").on(columns.path),
    users_rels_users_id_idx: index("users_rels_users_id_idx").on(
      columns.usersID
    ),
    users_rels_notes_id_idx: index("users_rels_notes_id_idx").on(
      columns.notesID
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [users.id],
      name: "users_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "users_rels_users_fk",
    }).onDelete("cascade"),
    notesIdFk: foreignKey({
      columns: [columns["notesID"]],
      foreignColumns: [notes.id],
      name: "users_rels_notes_fk",
    }).onDelete("cascade"),
  })
);

export const media = pgTable(
  "media",
  {
    id: serial("id").primaryKey(),
    alt: varchar("alt").notNull(),
    gameId: varchar("game_id"),
    gameName: varchar("game_name"),
    prefix: varchar("prefix").default("games"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    url: varchar("url"),
    thumbnailURL: varchar("thumbnail_u_r_l"),
    filename: varchar("filename"),
    mimeType: varchar("mime_type"),
    filesize: numeric("filesize"),
    width: numeric("width"),
    height: numeric("height"),
    focalX: numeric("focal_x"),
    focalY: numeric("focal_y"),
    sizes_thumbnail_url: varchar("sizes_thumbnail_url"),
    sizes_thumbnail_width: numeric("sizes_thumbnail_width"),
    sizes_thumbnail_height: numeric("sizes_thumbnail_height"),
    sizes_thumbnail_mimeType: varchar("sizes_thumbnail_mime_type"),
    sizes_thumbnail_filesize: numeric("sizes_thumbnail_filesize"),
    sizes_thumbnail_filename: varchar("sizes_thumbnail_filename"),
    sizes_card_url: varchar("sizes_card_url"),
    sizes_card_width: numeric("sizes_card_width"),
    sizes_card_height: numeric("sizes_card_height"),
    sizes_card_mimeType: varchar("sizes_card_mime_type"),
    sizes_card_filesize: numeric("sizes_card_filesize"),
    sizes_card_filename: varchar("sizes_card_filename"),
  },
  (columns) => ({
    media_updated_at_idx: index("media_updated_at_idx").on(columns.updatedAt),
    media_created_at_idx: index("media_created_at_idx").on(columns.createdAt),
    media_filename_idx: uniqueIndex("media_filename_idx").on(columns.filename),
    media_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      "media_sizes_thumbnail_sizes_thumbnail_filename_idx"
    ).on(columns.sizes_thumbnail_filename),
    media_sizes_card_sizes_card_filename_idx: index(
      "media_sizes_card_sizes_card_filename_idx"
    ).on(columns.sizes_card_filename),
  })
);

export const libraries_games = pgTable(
  "libraries_games",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    game: integer("game_id").references(() => games.id, {
      onDelete: "set null",
    }),
  },
  (columns) => ({
    _orderIdx: index("libraries_games_order_idx").on(columns._order),
    _parentIDIdx: index("libraries_games_parent_id_idx").on(columns._parentID),
    libraries_games_game_idx: index("libraries_games_game_idx").on(
      columns.game
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [libraries.id],
      name: "libraries_games_parent_id_fk",
    }).onDelete("cascade"),
  })
);

export const libraries = pgTable(
  "libraries",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    description: varchar("description"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    libraries_updated_at_idx: index("libraries_updated_at_idx").on(
      columns.updatedAt
    ),
    libraries_created_at_idx: index("libraries_created_at_idx").on(
      columns.createdAt
    ),
  })
);

export const notes = pgTable(
  "notes",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    notes: jsonb("notes"),
    user: integer("user_id")
      .notNull()
      .references(() => users.id, {
        onDelete: "set null",
      }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    notes_user_idx: index("notes_user_idx").on(columns.user),
    notes_updated_at_idx: index("notes_updated_at_idx").on(columns.updatedAt),
    notes_created_at_idx: index("notes_created_at_idx").on(columns.createdAt),
  })
);

export const gamenights_players = pgTable(
  "gamenights_players",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    player: integer("player_id").references(() => users.id, {
      onDelete: "set null",
    }),
  },
  (columns) => ({
    _orderIdx: index("gamenights_players_order_idx").on(columns._order),
    _parentIDIdx: index("gamenights_players_parent_id_idx").on(
      columns._parentID
    ),
    gamenights_players_player_idx: index("gamenights_players_player_idx").on(
      columns.player
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [gamenights.id],
      name: "gamenights_players_parent_id_fk",
    }).onDelete("cascade"),
  })
);

export const gamenights_games = pgTable(
  "gamenights_games",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    game: integer("game_id").references(() => games.id, {
      onDelete: "set null",
    }),
  },
  (columns) => ({
    _orderIdx: index("gamenights_games_order_idx").on(columns._order),
    _parentIDIdx: index("gamenights_games_parent_id_idx").on(columns._parentID),
    gamenights_games_game_idx: index("gamenights_games_game_idx").on(
      columns.game
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [gamenights.id],
      name: "gamenights_games_parent_id_fk",
    }).onDelete("cascade"),
  })
);

export const gamenights = pgTable(
  "gamenights",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    description: jsonb("description"),
    date: timestamp("date", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    location: geometryColumn("location"),
    recurring: boolean("recurring").default(false),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    gamenights_updated_at_idx: index("gamenights_updated_at_idx").on(
      columns.updatedAt
    ),
    gamenights_created_at_idx: index("gamenights_created_at_idx").on(
      columns.createdAt
    ),
  })
);

export const games_images = pgTable(
  "games_images",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    image: integer("image_id").references(() => media.id, {
      onDelete: "set null",
    }),
  },
  (columns) => ({
    _orderIdx: index("games_images_order_idx").on(columns._order),
    _parentIDIdx: index("games_images_parent_id_idx").on(columns._parentID),
    games_images_image_idx: index("games_images_image_idx").on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [games.id],
      name: "games_images_parent_id_fk",
    }).onDelete("cascade"),
  })
);

export const games_categories = pgTable(
  "games_categories",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    category: integer("category_id").references(() => categories.id, {
      onDelete: "set null",
    }),
  },
  (columns) => ({
    _orderIdx: index("games_categories_order_idx").on(columns._order),
    _parentIDIdx: index("games_categories_parent_id_idx").on(columns._parentID),
    games_categories_category_idx: index("games_categories_category_idx").on(
      columns.category
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [games.id],
      name: "games_categories_parent_id_fk",
    }).onDelete("cascade"),
  })
);

export const games_mechanics = pgTable(
  "games_mechanics",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    mechanic: integer("mechanic_id").references(() => mechanics.id, {
      onDelete: "set null",
    }),
  },
  (columns) => ({
    _orderIdx: index("games_mechanics_order_idx").on(columns._order),
    _parentIDIdx: index("games_mechanics_parent_id_idx").on(columns._parentID),
    games_mechanics_mechanic_idx: index("games_mechanics_mechanic_idx").on(
      columns.mechanic
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [games.id],
      name: "games_mechanics_parent_id_fk",
    }).onDelete("cascade"),
  })
);

export const games = pgTable(
  "games",
  {
    id: serial("id").primaryKey(),
    bggId: varchar("bgg_id"),
    name: varchar("name"),
    description: varchar("description"),
    "affiliate link": varchar("affiliate_link"),
    type: enum_games_type("type"),
    yearPublished: numeric("year_published"),
    minPlayers: numeric("min_players"),
    maxPlayers: numeric("max_players"),
    minPlaytime: numeric("min_playtime"),
    maxPlaytime: numeric("max_playtime"),
    minAge: numeric("min_age"),
    complexity: numeric("complexity"),
    "official link": varchar("official_link"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    games_bgg_id_idx: uniqueIndex("games_bgg_id_idx").on(columns.bggId),
    games_updated_at_idx: index("games_updated_at_idx").on(columns.updatedAt),
    games_created_at_idx: index("games_created_at_idx").on(columns.createdAt),
  })
);

export const categories = pgTable(
  "categories",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    categories_updated_at_idx: index("categories_updated_at_idx").on(
      columns.updatedAt
    ),
    categories_created_at_idx: index("categories_created_at_idx").on(
      columns.createdAt
    ),
  })
);

export const mechanics = pgTable(
  "mechanics",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    mechanics_updated_at_idx: index("mechanics_updated_at_idx").on(
      columns.updatedAt
    ),
    mechanics_created_at_idx: index("mechanics_created_at_idx").on(
      columns.createdAt
    ),
  })
);

export const payload_locked_documents = pgTable(
  "payload_locked_documents",
  {
    id: serial("id").primaryKey(),
    globalSlug: varchar("global_slug"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index(
      "payload_locked_documents_global_slug_idx"
    ).on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index(
      "payload_locked_documents_updated_at_idx"
    ).on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index(
      "payload_locked_documents_created_at_idx"
    ).on(columns.createdAt),
  })
);

export const payload_locked_documents_rels = pgTable(
  "payload_locked_documents_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
    mediaID: integer("media_id"),
    librariesID: integer("libraries_id"),
    notesID: integer("notes_id"),
    gamenightsID: integer("gamenights_id"),
    gamesID: integer("games_id"),
    categoriesID: integer("categories_id"),
    mechanicsID: integer("mechanics_id"),
  },
  (columns) => ({
    order: index("payload_locked_documents_rels_order_idx").on(columns.order),
    parentIdx: index("payload_locked_documents_rels_parent_idx").on(
      columns.parent
    ),
    pathIdx: index("payload_locked_documents_rels_path_idx").on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      "payload_locked_documents_rels_users_id_idx"
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      "payload_locked_documents_rels_media_id_idx"
    ).on(columns.mediaID),
    payload_locked_documents_rels_libraries_id_idx: index(
      "payload_locked_documents_rels_libraries_id_idx"
    ).on(columns.librariesID),
    payload_locked_documents_rels_notes_id_idx: index(
      "payload_locked_documents_rels_notes_id_idx"
    ).on(columns.notesID),
    payload_locked_documents_rels_gamenights_id_idx: index(
      "payload_locked_documents_rels_gamenights_id_idx"
    ).on(columns.gamenightsID),
    payload_locked_documents_rels_games_id_idx: index(
      "payload_locked_documents_rels_games_id_idx"
    ).on(columns.gamesID),
    payload_locked_documents_rels_categories_id_idx: index(
      "payload_locked_documents_rels_categories_id_idx"
    ).on(columns.categoriesID),
    payload_locked_documents_rels_mechanics_id_idx: index(
      "payload_locked_documents_rels_mechanics_id_idx"
    ).on(columns.mechanicsID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_locked_documents.id],
      name: "payload_locked_documents_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_locked_documents_rels_users_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "payload_locked_documents_rels_media_fk",
    }).onDelete("cascade"),
    librariesIdFk: foreignKey({
      columns: [columns["librariesID"]],
      foreignColumns: [libraries.id],
      name: "payload_locked_documents_rels_libraries_fk",
    }).onDelete("cascade"),
    notesIdFk: foreignKey({
      columns: [columns["notesID"]],
      foreignColumns: [notes.id],
      name: "payload_locked_documents_rels_notes_fk",
    }).onDelete("cascade"),
    gamenightsIdFk: foreignKey({
      columns: [columns["gamenightsID"]],
      foreignColumns: [gamenights.id],
      name: "payload_locked_documents_rels_gamenights_fk",
    }).onDelete("cascade"),
    gamesIdFk: foreignKey({
      columns: [columns["gamesID"]],
      foreignColumns: [games.id],
      name: "payload_locked_documents_rels_games_fk",
    }).onDelete("cascade"),
    categoriesIdFk: foreignKey({
      columns: [columns["categoriesID"]],
      foreignColumns: [categories.id],
      name: "payload_locked_documents_rels_categories_fk",
    }).onDelete("cascade"),
    mechanicsIdFk: foreignKey({
      columns: [columns["mechanicsID"]],
      foreignColumns: [mechanics.id],
      name: "payload_locked_documents_rels_mechanics_fk",
    }).onDelete("cascade"),
  })
);

export const payload_preferences = pgTable(
  "payload_preferences",
  {
    id: serial("id").primaryKey(),
    key: varchar("key"),
    value: jsonb("value"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index("payload_preferences_key_idx").on(
      columns.key
    ),
    payload_preferences_updated_at_idx: index(
      "payload_preferences_updated_at_idx"
    ).on(columns.updatedAt),
    payload_preferences_created_at_idx: index(
      "payload_preferences_created_at_idx"
    ).on(columns.createdAt),
  })
);

export const payload_preferences_rels = pgTable(
  "payload_preferences_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
  },
  (columns) => ({
    order: index("payload_preferences_rels_order_idx").on(columns.order),
    parentIdx: index("payload_preferences_rels_parent_idx").on(columns.parent),
    pathIdx: index("payload_preferences_rels_path_idx").on(columns.path),
    payload_preferences_rels_users_id_idx: index(
      "payload_preferences_rels_users_id_idx"
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_preferences.id],
      name: "payload_preferences_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_preferences_rels_users_fk",
    }).onDelete("cascade"),
  })
);

export const payload_migrations = pgTable(
  "payload_migrations",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    batch: numeric("batch"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index(
      "payload_migrations_updated_at_idx"
    ).on(columns.updatedAt),
    payload_migrations_created_at_idx: index(
      "payload_migrations_created_at_idx"
    ).on(columns.createdAt),
  })
);

export const relations_users_roles = relations(users_roles, ({ one }) => ({
  parent: one(users, {
    fields: [users_roles.parent],
    references: [users.id],
    relationName: "roles",
  }),
}));
export const relations_users_libraries = relations(
  users_libraries,
  ({ one }) => ({
    _parentID: one(users, {
      fields: [users_libraries._parentID],
      references: [users.id],
      relationName: "libraries",
    }),
    library: one(libraries, {
      fields: [users_libraries.library],
      references: [libraries.id],
      relationName: "library",
    }),
  })
);
export const relations_users_game_nights = relations(
  users_game_nights,
  ({ one }) => ({
    _parentID: one(users, {
      fields: [users_game_nights._parentID],
      references: [users.id],
      relationName: "gameNights",
    }),
    "game night": one(gamenights, {
      fields: [users_game_nights["game night"]],
      references: [gamenights.id],
      relationName: "game night",
    }),
  })
);
export const relations_users_friends = relations(users_friends, ({ one }) => ({
  _parentID: one(users, {
    fields: [users_friends._parentID],
    references: [users.id],
    relationName: "friends",
  }),
}));
export const relations_users_notebooks = relations(
  users_notebooks,
  ({ one }) => ({
    _parentID: one(users, {
      fields: [users_notebooks._parentID],
      references: [users.id],
      relationName: "notebooks",
    }),
  })
);
export const relations_users_rels = relations(users_rels, ({ one }) => ({
  parent: one(users, {
    fields: [users_rels.parent],
    references: [users.id],
    relationName: "_rels",
  }),
  usersID: one(users, {
    fields: [users_rels.usersID],
    references: [users.id],
    relationName: "users",
  }),
  notesID: one(notes, {
    fields: [users_rels.notesID],
    references: [notes.id],
    relationName: "notes",
  }),
}));
export const relations_users = relations(users, ({ one, many }) => ({
  roles: many(users_roles, {
    relationName: "roles",
  }),
  libraries: many(users_libraries, {
    relationName: "libraries",
  }),
  gameNights: many(users_game_nights, {
    relationName: "gameNights",
  }),
  friends: many(users_friends, {
    relationName: "friends",
  }),
  notebooks: many(users_notebooks, {
    relationName: "notebooks",
  }),
  avatar: one(media, {
    fields: [users.avatar],
    references: [media.id],
    relationName: "avatar",
  }),
  _rels: many(users_rels, {
    relationName: "_rels",
  }),
}));
export const relations_media = relations(media, () => ({}));
export const relations_libraries_games = relations(
  libraries_games,
  ({ one }) => ({
    _parentID: one(libraries, {
      fields: [libraries_games._parentID],
      references: [libraries.id],
      relationName: "games",
    }),
    game: one(games, {
      fields: [libraries_games.game],
      references: [games.id],
      relationName: "game",
    }),
  })
);
export const relations_libraries = relations(libraries, ({ many }) => ({
  games: many(libraries_games, {
    relationName: "games",
  }),
}));
export const relations_notes = relations(notes, ({ one }) => ({
  user: one(users, {
    fields: [notes.user],
    references: [users.id],
    relationName: "user",
  }),
}));
export const relations_gamenights_players = relations(
  gamenights_players,
  ({ one }) => ({
    _parentID: one(gamenights, {
      fields: [gamenights_players._parentID],
      references: [gamenights.id],
      relationName: "players",
    }),
    player: one(users, {
      fields: [gamenights_players.player],
      references: [users.id],
      relationName: "player",
    }),
  })
);
export const relations_gamenights_games = relations(
  gamenights_games,
  ({ one }) => ({
    _parentID: one(gamenights, {
      fields: [gamenights_games._parentID],
      references: [gamenights.id],
      relationName: "games",
    }),
    game: one(games, {
      fields: [gamenights_games.game],
      references: [games.id],
      relationName: "game",
    }),
  })
);
export const relations_gamenights = relations(gamenights, ({ many }) => ({
  players: many(gamenights_players, {
    relationName: "players",
  }),
  games: many(gamenights_games, {
    relationName: "games",
  }),
}));
export const relations_games_images = relations(games_images, ({ one }) => ({
  _parentID: one(games, {
    fields: [games_images._parentID],
    references: [games.id],
    relationName: "images",
  }),
  image: one(media, {
    fields: [games_images.image],
    references: [media.id],
    relationName: "image",
  }),
}));
export const relations_games_categories = relations(
  games_categories,
  ({ one }) => ({
    _parentID: one(games, {
      fields: [games_categories._parentID],
      references: [games.id],
      relationName: "categories",
    }),
    category: one(categories, {
      fields: [games_categories.category],
      references: [categories.id],
      relationName: "category",
    }),
  })
);
export const relations_games_mechanics = relations(
  games_mechanics,
  ({ one }) => ({
    _parentID: one(games, {
      fields: [games_mechanics._parentID],
      references: [games.id],
      relationName: "mechanics",
    }),
    mechanic: one(mechanics, {
      fields: [games_mechanics.mechanic],
      references: [mechanics.id],
      relationName: "mechanic",
    }),
  })
);
export const relations_games = relations(games, ({ many }) => ({
  images: many(games_images, {
    relationName: "images",
  }),
  categories: many(games_categories, {
    relationName: "categories",
  }),
  mechanics: many(games_mechanics, {
    relationName: "mechanics",
  }),
}));
export const relations_categories = relations(categories, () => ({}));
export const relations_mechanics = relations(mechanics, () => ({}));
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
    librariesID: one(libraries, {
      fields: [payload_locked_documents_rels.librariesID],
      references: [libraries.id],
      relationName: "libraries",
    }),
    notesID: one(notes, {
      fields: [payload_locked_documents_rels.notesID],
      references: [notes.id],
      relationName: "notes",
    }),
    gamenightsID: one(gamenights, {
      fields: [payload_locked_documents_rels.gamenightsID],
      references: [gamenights.id],
      relationName: "gamenights",
    }),
    gamesID: one(games, {
      fields: [payload_locked_documents_rels.gamesID],
      references: [games.id],
      relationName: "games",
    }),
    categoriesID: one(categories, {
      fields: [payload_locked_documents_rels.categoriesID],
      references: [categories.id],
      relationName: "categories",
    }),
    mechanicsID: one(mechanics, {
      fields: [payload_locked_documents_rels.mechanicsID],
      references: [mechanics.id],
      relationName: "mechanics",
    }),
  })
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: "_rels",
    }),
  })
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  })
);
export const relations_payload_preferences = relations(
  payload_preferences,
  ({ many }) => ({
    _rels: many(payload_preferences_rels, {
      relationName: "_rels",
    }),
  })
);
export const relations_payload_migrations = relations(
  payload_migrations,
  () => ({})
);

type DatabaseSchema = {
  enum_users_roles: typeof enum_users_roles;
  enum_games_type: typeof enum_games_type;
  users_roles: typeof users_roles;
  users_libraries: typeof users_libraries;
  users_game_nights: typeof users_game_nights;
  users_friends: typeof users_friends;
  users_notebooks: typeof users_notebooks;
  users: typeof users;
  users_rels: typeof users_rels;
  media: typeof media;
  libraries_games: typeof libraries_games;
  libraries: typeof libraries;
  notes: typeof notes;
  gamenights_players: typeof gamenights_players;
  gamenights_games: typeof gamenights_games;
  gamenights: typeof gamenights;
  games_images: typeof games_images;
  games_categories: typeof games_categories;
  games_mechanics: typeof games_mechanics;
  games: typeof games;
  categories: typeof categories;
  mechanics: typeof mechanics;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  relations_users_roles: typeof relations_users_roles;
  relations_users_libraries: typeof relations_users_libraries;
  relations_users_game_nights: typeof relations_users_game_nights;
  relations_users_friends: typeof relations_users_friends;
  relations_users_notebooks: typeof relations_users_notebooks;
  relations_users_rels: typeof relations_users_rels;
  relations_users: typeof relations_users;
  relations_media: typeof relations_media;
  relations_libraries_games: typeof relations_libraries_games;
  relations_libraries: typeof relations_libraries;
  relations_notes: typeof relations_notes;
  relations_gamenights_players: typeof relations_gamenights_players;
  relations_gamenights_games: typeof relations_gamenights_games;
  relations_gamenights: typeof relations_gamenights;
  relations_games_images: typeof relations_games_images;
  relations_games_categories: typeof relations_games_categories;
  relations_games_mechanics: typeof relations_games_mechanics;
  relations_games: typeof relations_games;
  relations_categories: typeof relations_categories;
  relations_mechanics: typeof relations_mechanics;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
};

declare module "@payloadcms/db-postgres/types" {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
